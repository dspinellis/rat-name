// vim: syntax=cpp:sw=2:smarttab

#ifndef RAT_SET_H
#define RAT_SET_H

#include <set>
#include <functional>
#include <memory>

#include <cxx/pair>

namespace rat {
  template <class K, class C = std::less<K>,
    class A = std::allocator<K> > class Set {
  private:
    typedef std::set<K, C, A> S;
    S s;
  public:
    // types
    typedef typename S::key_type		Key;
    typedef typename S::value_type		Value;
    typedef typename S::key_compare		KeyCompare;
    typedef typename S::value_compare		ValueCompare;
    typedef typename S::allocator_type		Allocator;
    typedef typename S::reference		Reference;
    typedef typename S::const_reference		ConstReference;
    typedef typename S::iterator		Iterator;
    typedef typename S::const_iterator		ConstIterator;
    typedef typename S::size_type		Size;
    typedef typename S::difference_type		Difference;
    typedef typename S::pointer			Pointer;
    typedef typename S::const_pointer		ConstPointer;
    typedef typename S::reverse_iterator	ReverseIterator;
    typedef typename S::const_reverse_iterator	ConstReverseIterator;

    // construct/copy/destroy
    explicit Set(const KeyCompare comp = C(), const Allocator& a = A()) :
	    s(comp, a) {}
    template <class InputIterator>
	    Set(InputIterator first, InputIterator last,
	    const KeyCompare comp = C(), const Allocator& a = A()) :
	    s(first, last, comp, a) {}
    Set(const Set<K, C, A>& x) : s(x.s) {}
    ~Set() {}
    Set<K, C, A>& operator=(const Set<K, C, A>& x) { s = x.s; return *this; }
    Allocator getAllocator() const { return s.get_allocator(); }

    // iterators
    Iterator			begin() { return s.begin(); }
    ConstIterator		begin() const { return s.begin(); }
    Iterator			end() { return s.end(); }
    ConstIterator		end() const { return s.end(); }
    ReverseIterator		reverseBegin() { return s.rbegin(); }
    ConstReverseIterator	reverseBegin() const { return s.rbegin(); }
    ReverseIterator		reverseEnd() { return s.rend(); }
    ConstReverseIterator	reverseEnd() const { return s.rend(); }
    // TODO cbegin [...]

    // capacity:
    bool			empty() const { return s.empty(); }
    Size			size() const { return s.size(); }
    Size			maxSize() const { return s.max_size(); }

    // modifiers:
    Pair<Iterator, bool>	insert(const Value& x) { return s.insert(x); }
    Iterator			insert(Iterator pos, const Value& x) {
				  return s.insert(pos, x);
				}
    template <class InputIterator> void
				insert(InputIterator first, InputIterator last) {
				  s.insert(first, last);
				}
    Iterator		erase(ConstIterator position) { s.erase(position); }
    Size			erase(const Value x) { s.erase(x); }
    Iterator		erase(ConstIterator first, ConstIterator last) {
			    s.erase(first, last);
			  }
    void			swap(Set<K, C, A> &x) { s.swap(x.s); }
    void			clear() { s.clear(); }

    // observers:
    KeyCompare		keyCompare() const { return s.key_comp(); }
    ValueCompare		valueCompare() const { return s.value_comp(); }

    // set operations:
    Iterator		find(const Key& x) { return s.find(x); }
    ConstIterator		find(const Key& x) const { return s.find(x); }

    Size			count(const Key& x) const { return s.count(x); }

    Iterator		lowerBound(const Key& x) { return s.lower_bound(x); }
    ConstIterator		lowerBound(const Key& x) const { return s.lower_bound(x); }

    Iterator		upperBound(const Key& x) { return s.upper_bound(x); }
    ConstIterator		upperBound(const Key& x) const { return s.upper_bound(x); }

    Pair<Iterator, Iterator>
			  equalRange(const Key& x) { return s.equal_range(x); }
    Pair<ConstIterator, ConstIterator>
			  equalRange(const Key& x) const {
			    return s.equal_range(x);
			  }
    // TODO all &&
  };

  template <class Key, class Compare, class Allocator>
  bool operator== (const Set<Key,Compare,Allocator>& x,
    const Set<Key,Compare,Allocator>& y) {
      return x.s == y.s;
  }

  template <class Key, class Compare, class Allocator>
  bool operator< (const Set<Key,Compare,Allocator>& x,
    const Set<Key,Compare,Allocator>& y) {
      return x.s < y.s;
  }

  template <class Key, class Compare, class Allocator>
  bool operator!= (const Set<Key,Compare,Allocator>& x,
    const Set<Key,Compare,Allocator>& y) {
      return x.s != y.s;
  }

  template <class Key, class Compare, class Allocator>
  bool operator> (const Set<Key,Compare,Allocator>& x,
    const Set<Key,Compare,Allocator>& y) {
      return x.s > y.s;
  }

  template <class Key, class Compare, class Allocator>
  bool operator>= (const Set<Key,Compare,Allocator>& x,
    const Set<Key,Compare,Allocator>& y) {
      return x.s >= y.s;
  }

  template <class Key, class Compare, class Allocator>
  bool operator<= (const Set<Key,Compare,Allocator>& x,
    const Set<Key,Compare,Allocator>& y) {
      return x.s <= y.s;
  }
}
#endif
